{"version":3,"sources":["utils/axiosConnector.js","components/SubtaskSection.js","components/TaskForm.js","components/AddTaskButton.js","components/ConfirmDialog.js","components/Accordion.js","components/SimpleCard.js","components/Infobox.js","components/TaskTable.js","App.js","reportWebVitals.js","index.js","utils/timeConverter.js"],"names":["axiosConnector","fetchBasicData","a","axios","get","catch","error","response","console","log","data","status","headers","fetched","fetchArchivedData","postTaskForm","urlTweak","json","post","res","deleteTask","id","delete","archiveOrCompleteTask","regexp","put","iOSBoxShadow","IOSSlider","withStyles","root","color","height","padding","thumb","width","backgroundColor","boxShadow","marginTop","marginLeft","active","valueLabel","left","fontSize","top","background","track","rail","opacity","mark","markActive","Slider","SubtaskSection","title","minutes","isCompleted","handleSubTitleChange","handleSubSliderChange","handleSubCompletedChange","TextField","autoFocus","value","label","style","margin","placeholder","helperText","fullWidth","onChange","InputLabelProps","shrink","className","Typography","gutterBottom","defaultValue","aria-labelledby","valueLabelDisplay","step","marks","min","max","valueLabelFormat","timeConverter","minutesToSlider","Checkbox","checked","size","inputProps","useStyles","makeStyles","theme","border","display","flexWrap","maxWidth","textField","spacing","marginRight","slider","cancelButton","maxHeight","cancelButtonSub","saveButton","subTaskWrapper","subSection","borderLeft","listStyle","paddingRight","marginBottom","slider_value_text","TaskForm","task","handleFetchChange","React","useState","updateState","forceUpdate","useCallback","undefined","action","created","modified","TitleValue","SliderValue","due","selectedDate","subtasks","CompletedValue","isArchived","i","subtaskArray","length","push","subtask_id","maintask_id","statusText","message","setCompletedValue","setSliderValue","setTitleValue","setSelectedDate","setSubtasks","index","e","newArr","target","getAttribute","removeSubtask","splice","classes","to","Button","startIcon","MuiPickersUtilsProvider","utils","DateFnsUtils","Grid","container","format","disablePast","date","KeyboardButtonProps","disabled","getAriaValueText","event","newValue","map","item","onClick","list_id","Fab","variant","Math","random","saveTask","disableElevation","AddTaskButton","aria-label","text-align","dialog","position","dialogContent","textAlign","dialogAction","justifyContent","ConfirmDialog","props","confirmDialog","setConfirmDialog","Dialog","open","isOpen","paper","DialogTitle","DialogContent","subTitle","DialogActions","onConfirm","heading","typography","pxToRem","fontWeight","fontWeightRegular","checkbox","button","listItem","SimpleAccordion","a1","a2","taskObject","handleTaskChange","archivedMode","setTask","newArray","Boolean","subtasksCompleted","setSubtasksCompleted","originalState","handleChange","updateStateObject","newObject","sendChangesToBackend","axiosArchiver","regex","actionToDo","axiosDeleter","Accordion","AccordionSummary","expandIcon","aria-controls","AccordionDetails","minutesToSubtask","IconButton","pathname","JSON","stringify","textShadow","minWidth","bullet","transform","pos","SimpleCard","icon","Card","CardContent","CardActions","Infobox","snackinfo","handleCloseSnack","actionPerformed","isSuccesful","errorInfo","isVisible","actionInfo","Box","float","TaskTable","dataProps","isLoading","tableData","setTableData","useEffect","columns","field","type","dateSetting","locale","cellStyle","headerStyle","borderRadius","render","rowData","meta","percentage_done","minutesToTitle","minutes_left","dataType","cursor","CircularProgress","textDecoration","options","maxBodyHeight","searchFieldStyle","thirdSortClick","emptyRowsWhenPaging","selection","pageSize","App","setData","archivedData","setArchivedData","setIsLoading","needToFetch","setNeedToFetch","snack","setSnack","appTask","setAppTask","temp","setTimeout","fetchData","alert","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","StrictMode","rel","href","document","getElementById","module","exports","total_minutes","string","hours","parseInt"],"mappings":"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","file":"static/js/main.3523e513.chunk.js","sourcesContent":["import axios from 'axios'\n\n// since this class can't deal with handleFetchChange on its own, and importing like\n// that doesn't work in react, this class falls a bit short. Would probably need to\n// be an actual react component but let's see if there's time to do it before deadline\n\n// import handleFetchChange from '../App.js'\n\nlet host = ''\n\n// UNCOMMENT NEXT LINE TO USE LOCALHOST!\n// host = 'http://localhost:8080'\n\n// used in api.js\nconst axiosConnector = {\n  fetchBasicData: async () => {\n    const fetched = await axios.get(`${host}/api/`).catch(function (error) {\n      if (error.response) {\n        console.log(error.response.data)\n        console.log(error.response.status)\n        console.log(error.response.headers)\n      }\n    })\n\n    return fetched\n  },\n\n  fetchArchivedData: async () => {\n    const fetched = await axios\n      .get(`${host}/api/archived`)\n      .catch(function (error) {\n        if (error.response) {\n          console.log(error.response.data)\n          console.log(error.response.status)\n          console.log(error.response.headers)\n        }\n      })\n\n    return fetched\n  },\n\n  //used in TaskForm.js & Accordion.js\n  postTaskForm: async (urlTweak, json) => {\n    let res = await axios\n      .post(`${host}/api${urlTweak}`, json)\n      .catch(function (error) {\n        if (error.response) {\n          console.log(error.response.data)\n          console.log(error.response.status)\n          console.log(error.response.headers)\n        }\n      })\n    // console.log(res)\n    return res\n\n    //.then((response) => console.log(response))\n  },\n\n  //used in Accordion.js\n\n  deleteTask: async (id) => {\n    let res = await axios.delete(`${host}/api/${id}`).catch(function (error) {\n      if (error.response) {\n        console.log(error.response.data)\n        console.log(error.response.status)\n        console.log(error.response.headers)\n      }\n    })\n    // console.log(res)\n    return res\n\n    // .then(handleFetchChange())\n  },\n\n  //used in Accordion.js and TaskTable.js\n  archiveOrCompleteTask: async (id, regexp) => {\n    let res = await axios\n      .put(`${host}/api/put/${regexp}${id}`)\n      .catch(function (error) {\n        if (error.response) {\n          console.log(error.response.data)\n          console.log(error.response.status)\n          console.log(error.response.headers)\n        }\n      })\n    // console.log(res)\n    return res\n\n    //.then((response) => console.log(response))\n    //.then(handleFetchChange())\n  },\n}\n\nexport default axiosConnector\n","import React from 'react'\n\nimport { withStyles } from '@material-ui/core/styles'\nimport Slider from '@material-ui/core/Slider'\nimport Typography from '@material-ui/core/Typography'\nimport timeConverter from '../utils/timeConverter.js'\nimport TextField from '@material-ui/core/TextField'\nimport Checkbox from '@material-ui/core/Checkbox'\n\nconst iOSBoxShadow =\n  '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.13),0 0 0 1px rgba(0,0,0,0.02)'\n\nconst IOSSlider = withStyles({\n  root: {\n    color: '#3880ff',\n    height: 2,\n    padding: '40px 0 10px 10px',\n  },\n  thumb: {\n    height: 28,\n    width: 28,\n    backgroundColor: 'violet',\n    boxShadow: iOSBoxShadow,\n    marginTop: -14,\n    marginLeft: -14,\n    '&:focus, &:hover, &$active': {\n      boxShadow:\n        '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.3),0 0 0 1px rgba(0,0,0,0.02)',\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        boxShadow: iOSBoxShadow,\n      },\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 12px)',\n    fontSize: '1em',\n    width: 50,\n    top: -22,\n    '& *': {\n      background: 'transparent',\n      color: '#000',\n    },\n  },\n  track: {\n    height: 2,\n  },\n  rail: {\n    height: 2,\n    opacity: 0.5,\n    backgroundColor: '#bfbfbf',\n  },\n  mark: {\n    backgroundColor: '#bfbfbf',\n    height: 8,\n    width: 1,\n    marginTop: -3,\n  },\n  markActive: {\n    opacity: 1,\n    backgroundColor: 'currentColor',\n  },\n})(Slider)\n\nexport default function SubtaskSection({\n  title,\n  minutes,\n  isCompleted,\n  handleSubTitleChange,\n  handleSubSliderChange,\n  handleSubCompletedChange,\n}) {\n  return (\n    <>\n      <div>\n        <TextField\n          autoFocus={true}\n          value={title}\n          label=\"Subtask Name\"\n          style={{ margin: 8 }}\n          placeholder=\"Enter task name here\"\n          helperText=\"\"\n          fullWidth={true}\n          margin=\"normal\"\n          onChange={handleSubTitleChange}\n          InputLabelProps={{\n            shrink: true,\n          }}\n        />\n      </div>\n      <div className=\"slider-width\">\n        <Typography id=\"discrete-slider\" gutterBottom style={{ margin: 8 }}>\n          Subtask length\n        </Typography>\n\n        <IOSSlider\n          defaultValue={minutes}\n          style={{ margin: 8 }}\n          aria-labelledby=\"discrete-slider\"\n          valueLabelDisplay=\"auto\"\n          step={15}\n          marks\n          min={15}\n          max={480}\n          onChange={handleSubSliderChange}\n          valueLabelFormat={timeConverter.minutesToSlider(minutes)}\n        />\n      </div>\n\n      <div>\n        <Checkbox\n          style={{ color: 'purple' }}\n          checked={isCompleted}\n          onChange={() => handleSubCompletedChange()}\n          size=\"small\"\n          inputProps={{ 'aria-label': 'checkbox with small size' }}\n        />\n        Mark as done\n      </div>\n    </>\n  )\n}\n","import React from 'react'\n\nimport { withStyles, makeStyles } from '@material-ui/core/styles'\nimport TextField from '@material-ui/core/TextField'\n\nimport 'date-fns'\nimport Grid from '@material-ui/core/Grid'\nimport DateFnsUtils from '@date-io/date-fns'\n\nimport Typography from '@material-ui/core/Typography'\nimport Slider from '@material-ui/core/Slider'\n\nimport timeConverter from '../utils/timeConverter.js'\n\nimport Button from '@material-ui/core/Button'\n\nimport SaveIcon from '@material-ui/icons/Save'\n\nimport CancelIcon from '@material-ui/icons/Cancel'\n\nimport Fab from '@material-ui/core/Fab'\nimport AddIcon from '@material-ui/icons/Add'\n\nimport axiosConnector from '../utils/axiosConnector.js'\nimport SubtaskSection from './SubtaskSection.js'\nimport Checkbox from '@material-ui/core/Checkbox'\n\nimport { Link } from 'react-router-dom'\n\nimport {\n  MuiPickersUtilsProvider,\n  KeyboardDatePicker,\n} from '@material-ui/pickers'\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    border: '4px solid lightgrey',\n    // borderColor: 'lightgrey',\n    padding: '5px',\n    display: 'flex',\n    flexWrap: 'wrap',\n    backgroundColor: 'white',\n    maxWidth: '400px',\n  },\n  textField: {\n    marginLeft: theme.spacing(1),\n    marginRight: theme.spacing(1),\n    width: '25ch',\n  },\n  slider: {\n    width: 300,\n  },\n  cancelButton: {\n    /* right: '47%', */\n    maxWidth: '12px',\n    maxHeight: '42px',\n\n    /*pitäis saada erilleen muista kulmaan */\n  },\n  cancelButtonSub: {\n    /* right: '47%', */\n    maxWidth: '12px',\n    maxHeight: '42px',\n    left: '-15px',\n\n    /*pitäis saada erilleen muista kulmaan */\n  },\n  saveButton: {\n    marginTop: '50px',\n    /*\n    right: '-38%',\n    height: '35px',\n    marginTop: '84px',\n    marginBottom: '5px',\n    bottom: '2%',\n      */\n    /*pitää säätää ei ehkä sticky en osaa nyt*/\n  },\n  subTaskWrapper: {\n    marginTop: '2px',\n    maxWidth: '350px',\n  },\n  subSection: {\n    borderLeft: '2px solid lightGray',\n    listStyle: 'none',\n    paddingRight: '5%',\n    marginBottom: '39px',\n    backgroundColor: 'rgb(179, 255, 217)',\n  },\n}))\n\nconst iOSBoxShadow =\n  '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.13),0 0 0 1px rgba(0,0,0,0.02)'\n\nconst IOSSlider = withStyles({\n  root: {\n    color: '#3880ff',\n    height: 2,\n    padding: '40px 0 10px 10px',\n  },\n  thumb: {\n    height: 28,\n    width: 28,\n    backgroundColor: 'violet',\n    boxShadow: iOSBoxShadow,\n    marginTop: -14,\n    marginLeft: -14,\n    '&:focus, &:hover, &$active': {\n      boxShadow:\n        '0 3px 1px rgba(0,0,0,0.1),0 4px 8px rgba(0,0,0,0.3),0 0 0 1px rgba(0,0,0,0.02)',\n      // Reset on touch devices, it doesn't add specificity\n      '@media (hover: none)': {\n        boxShadow: iOSBoxShadow,\n      },\n    },\n  },\n  active: {},\n  valueLabel: {\n    left: 'calc(-50% + 12px)',\n    fontSize: '1em',\n    width: 50,\n    top: -22,\n    '& *': {\n      background: 'transparent',\n      color: '#000',\n    },\n  },\n  track: {\n    height: 2,\n  },\n  rail: {\n    height: 2,\n    opacity: 0.5,\n    backgroundColor: '#bfbfbf',\n  },\n  mark: {\n    backgroundColor: '#bfbfbf',\n    height: 8,\n    width: 1,\n    marginTop: -3,\n  },\n  markActive: {\n    opacity: 1,\n    backgroundColor: 'currentColor',\n  },\n})(Slider)\n\nfunction slider_value_text(value) {\n  // testt\n  return `${value}`\n}\n\n// IMPORTANT TO KNOW: This component will be (re-)used in both /create and /edit routes (found in App.js) with\n// the difference of whether to create a new entry to edit existing.\n//\n// When (task taken as props), task.id === undefined, then component is in \"create mode\" (so to speak)\n// otherwise it's in \"edit mode\"\n//\n// in practice the difference is whether it sends the data throuh POST to [hosturl]/api/ for adding a new task to database\n// [hosturl]/api/modify\n\nexport default function TaskForm({ task, handleFetchChange }) {\n  // forcing of re-render, finally came with this solution to fix bugged visuals in ui sliders when removing subtasks.\n  // Let's hope there will be no outdated comments remaining talking about this issue, since this should fix it unless more problems\n  // might occur that don't show up right away and it's almost the final release day\n  const [, updateState] = React.useState()\n  const forceUpdate = React.useCallback(() => updateState({}), [])\n\n  async function saveTask() {\n    let urlTweak = task.id !== undefined ? '/modify' : ''\n    let action = task.id !== undefined ? 'modify' : 'create'\n\n    let json = {\n      id: task.id,\n      created: task.created,\n      modified: task.modified,\n\n      title: TitleValue,\n      minutes: SliderValue,\n      due: selectedDate,\n      subtasks: [],\n\n      isCompleted: CompletedValue,\n      isArchived: task.isArchived,\n    }\n\n    for (let i = 0; i < subtaskArray.length; i++) {\n      json.subtasks.push({\n        subtask_id: subtaskArray[i].subtask_id,\n        maintask_id: subtaskArray[i].maintask_id,\n\n        title: subtaskArray[i].title,\n        minutes: subtaskArray[i].minutes,\n        isCompleted: subtaskArray[i].isCompleted,\n      })\n    }\n\n    try {\n      let response = await axiosConnector.postTaskForm(urlTweak, json)\n      // 200 means succesful post, so we know to give correct info to infoBox through app.js Snack-state, using handleFetchChange\n      if (\n        (response.status === 200 && action === 'modify') ||\n        (response.status === 201 && action === 'create')\n      ) {\n        handleFetchChange(json, action, true, '', true)\n      } else {\n        // otherwise we will show error message, and ok this code might not mean much to average user but it's still something\n        handleFetchChange(\n          json,\n          action,\n          false,\n          '' + response.status + ': ' + response.statusText,\n          true\n        )\n      }\n    } catch (err) {\n      // then there is probably the real error message that could happen more often\n      handleFetchChange(json, action, false, '' + err.message, true)\n    }\n  }\n\n  const [CompletedValue, setCompletedValue] = React.useState(task.isCompleted)\n\n  const [SliderValue, setSliderValue] = React.useState(task.minutes)\n\n  const [TitleValue, setTitleValue] = React.useState(task.title)\n\n  const [selectedDate, setSelectedDate] = React.useState(task.due)\n\n  const [subtaskArray, setSubtasks] = React.useState(\n    task.subtasks !== undefined ? task.subtasks : []\n  )\n\n  const createNewSubtask = () => {\n    // console.log(subtaskArray)\n    // this didn't work like it was supposed to, can't seem to fix it anymore,\n    // minutes for subtasks will always be 15 then at start\n    // sort of case of null or undefined might have ruined it. It's a minor issue though,\n    // not really a bug but just couldn't get it to work like we wanted.\n\n    // let minutesToAdd =\n    //  SliderValue === (0 || undefined || null) ? 15 : SliderValue\n\n    setSubtasks([\n      ...subtaskArray,\n      {\n        list_id: Math.random(),\n        title: 'Subtask ' + (subtaskArray.length + 1),\n        minutes: 15,\n\n        isCompleted: false,\n      },\n    ])\n  }\n\n  // handles with Sub before them are used in SubtaskSection.js as props\n  // and the others control the values in main task\n\n  const handleSubTitleChange = (index) => (e) => {\n    let newArr = [...subtaskArray]\n    newArr[index].title = e.target.value\n    setSubtasks(newArr)\n  }\n\n  const handleSubSliderChange = (index) => (e) => {\n    let newArr = [...subtaskArray]\n    newArr[index].minutes = e.target.getAttribute('aria-valuenow')\n\n    setSubtasks(newArr)\n  }\n\n  const handleSubCompletedChange = (index) => (e) => {\n    let newArr = [...subtaskArray]\n\n    if (newArr[index].isCompleted === true) {\n      newArr[index].isCompleted = false\n    } else {\n      newArr[index].isCompleted = true\n    }\n\n    setSubtasks(newArr)\n  }\n\n  const removeSubtask = (index) => () => {\n    let newArr = [...subtaskArray]\n\n    //in case this was the only subtask, let's put the SliderValue(minutes) back from zero to what was in the last subtask instead\n    //otherwise it would be possible to save a task with minutes 0 , so it would be sort of completed right away without being complted\n    if (newArr.length === 1) {\n      setSliderValue(subtaskArray[0].minutes)\n    }\n\n    newArr.splice(index, 1)\n\n    setSubtasks(newArr)\n    // PHEW Managed to fix the bugged slider visuals after removing subtasks with this forceUpdate().\n    // It's almost the final release day but let's see if there's any more bugs occuring\n    forceUpdate()\n  }\n\n  const handleDateChange = (date) => {\n    setSelectedDate(date)\n  }\n\n  const handleSliderChange = (event, newValue) => {\n    setSliderValue(newValue)\n  }\n\n  const handleTitleChange = (e) => {\n    setTitleValue(e.target.value)\n  }\n\n  // used in checkbox if a user wants to undo a task that was already marked as complete, or\n  // create a task that is already completed because some users might want to use the app like that\n  const handleTaskChange = () => {\n    setCompletedValue(!CompletedValue)\n  }\n\n  const classes = useStyles()\n\n  return (\n    <>\n      <div className={classes.root}>\n        <div className=\"create-wrapper\">\n          <Link to=\"/\">\n            <Button\n              color=\"secondary\"\n              size=\"small\"\n              className={classes.cancelButton}\n              startIcon={<CancelIcon />}\n              // fullWidth=\"false\"\n            ></Button>\n          </Link>\n\n          <div>\n            <TextField\n              autoFocus={true}\n              value={TitleValue}\n              id=\"title\"\n              label=\"Task Name\"\n              style={{ margin: 8 }}\n              placeholder=\"Enter task name here\"\n              helperText=\"\"\n              fullWidth\n              margin=\"normal\"\n              onChange={handleTitleChange}\n              InputLabelProps={{\n                shrink: true,\n              }}\n            />\n          </div>\n\n          <MuiPickersUtilsProvider utils={DateFnsUtils}>\n            {/* <Grid container justify=\"space-around\"> */}\n            <Grid container className=\"duedate\">\n              <Typography\n                id=\"datelabel\"\n                gutterBottom\n                style={{\n                  margin: 8,\n                  marginBottom: -10,\n                  fontSize: '2',\n                  color: 'gray',\n                }}\n              >\n                Due Date (DEADLINE):\n              </Typography>\n              <KeyboardDatePicker\n                style={{ margin: 8 }}\n                margin=\"normal\"\n                id=\"due_date\"\n                //label=\"Due Date (DEADLINE)\"\n                format=\"dd.MM.yyyy\"\n                value={selectedDate}\n                // when creating new task, due_date can't be past past date, but in edit mode it can\n                disablePast={task.id === undefined}\n                onChange={handleDateChange}\n                KeyboardButtonProps={{\n                  'aria-label': 'change due date',\n                }}\n              />\n            </Grid>\n          </MuiPickersUtilsProvider>\n\n          {/* in case there are subtasks, we don't want to have a slider or checkbox to mark the whole task done cause\n          there would not be good solution how to deal with subtask-completions in a \"perfect\" way for all possible\n          scenarios after that. User can still can\n          mark the whole task done in the main menu, or he can mark all subtasks as done manually here if that's what he wants to\n          do. Also checking some subtasks undone will mark the task undone as a whole too of course */}\n\n          {subtaskArray.length === 0 ? (\n            <>\n              <div className={classes.slider}>\n                <Typography id=\"ios-slider\" gutterBottom style={{ margin: 8 }}>\n                  Adjust task length:\n                </Typography>\n\n                <IOSSlider\n                  disabled={\n                    subtaskArray !== undefined ? subtaskArray.length > 0 : false\n                  }\n                  style={{ margin: 8 }}\n                  defaultValue={SliderValue}\n                  getAriaValueText={slider_value_text}\n                  valueLabelDisplay=\"auto\"\n                  step={15}\n                  marks\n                  min={15}\n                  max={480}\n                  onChange={handleSliderChange}\n                  valueLabelFormat={timeConverter.minutesToSlider(SliderValue)}\n                />\n              </div>\n              <div>\n                <Checkbox\n                  style={{ color: 'purple' }}\n                  checked={CompletedValue}\n                  onChange={() => handleTaskChange()}\n                  size=\"small\"\n                  inputProps={{ 'aria-label': 'checkbox with small size' }}\n                />\n                Mark this task as complete\n              </div>\n            </>\n          ) : (\n            <> </>\n          )}\n\n          <div className={classes.subTaskWrapper}>\n            {/*{subtasks !== [] ? <></> : <></>}*/}\n            <div className=\"create-subtask\">\n              <ul style={{ margin: 0 }}>\n                {subtaskArray.map((item, index) => (\n                  <li\n                    key={\n                      item.subtask_id !== undefined\n                        ? item.subtask_id\n                        : item.list_id\n                    }\n                    className={classes.subSection}\n                  >\n                    <Button\n                      color=\"secondary\"\n                      size=\"small\"\n                      className={classes.cancelButtonSub}\n                      startIcon={<CancelIcon />}\n                      // fullWidth=\"false\"\n                      // onClick={removeSubtaskAndRefresh(index)}\n                      onClick={removeSubtask(index)}\n                    ></Button>\n\n                    <SubtaskSection\n                      minutes={item.minutes}\n                      title={item.title}\n                      isCompleted={item.isCompleted}\n                      handleSubTitleChange={handleSubTitleChange(index)}\n                      handleSubSliderChange={handleSubSliderChange(\n                        index\n                        // item.minutes\n                      )}\n                      //handleSubCompletedChange={() => console.log('sdf')}\n                      handleSubCompletedChange={handleSubCompletedChange(index)}\n                    ></SubtaskSection>\n                  </li>\n                ))}\n              </ul>\n            </div>\n\n            <Fab\n              variant=\"extended\"\n              color=\"primary\"\n              style={{ backgroundColor: 'green', marginLeft: '20px' }}\n              size=\"small\"\n              onClick={() => {\n                createNewSubtask()\n              }}\n            >\n              <AddIcon />\n              ADD SUBTASK\n            </Fab>\n          </div>\n\n          <br />\n          {/* disabled props=false doesnt work like it's supposed to according to their documentation/tutorials\n           in material ui api so had to do this very confusing own version where the same button gets\n           rendered as disabled if the task value is '' */}\n          {TitleValue !== '' ? (\n            <>\n              <Link to=\"/\">\n                <Button\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"medium\"\n                  className={classes.saveButton}\n                  onClick={() => {\n                    saveTask()\n                  }}\n                  startIcon={<SaveIcon />}\n                >\n                  Save\n                </Button>\n              </Link>\n            </>\n          ) : (\n            <>\n              <div>\n                <Button\n                  disableElevation\n                  disabled\n                  variant=\"contained\"\n                  color=\"primary\"\n                  size=\"medium\"\n                  className={classes.root}\n                  onClick={() => {\n                    /* saveTask() */\n                  }}\n                  startIcon={<SaveIcon />}\n                >\n                  Save\n                </Button>\n              </div>\n            </>\n          )}\n        </div>\n      </div>\n    </>\n  )\n}\n","import React from \"react\";\nimport Fab from \"@material-ui/core/Fab\";\nimport AddIcon from \"@material-ui/icons/Add\";\n// import styles from '../App.css'\n\nexport default function AddTaskButton() {\n  return (\n    <Fab\n      color=\"primary\"\n      aria-label=\"add\"\n      style={{ padding: \"40px\" }}\n      size=\"large\"\n      display=\"table\"\n      margin=\"auto\"\n      text-align=\"center\"\n    >\n      <AddIcon />\n    </Fab>\n  );\n}\n","import React from 'react'\n// import Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\n\nimport {\n  Dialog,\n  DialogTitle,\n  DialogContent,\n  DialogActions,\n  makeStyles,\n  Typography,\n} from '@material-ui/core'\n\nconst useStyles = makeStyles((theme) => ({\n  dialog: {\n    padding: theme.spacing(2),\n    position: 'absolute',\n    top: theme.spacing(5),\n  },\n  dialogContent: {\n    textAlign: 'center',\n  },\n  dialogAction: {\n    justifyContent: 'center',\n  },\n}))\nexport default function ConfirmDialog(props) {\n  const { confirmDialog, setConfirmDialog } = props\n  const classes = useStyles()\n\n  return (\n    <Dialog open={confirmDialog.isOpen} classes={{ paper: classes.dialog }}>\n      <DialogTitle></DialogTitle>\n      <DialogContent className={classes.dialogContent}>\n        <Typography variant=\"h6\">{confirmDialog.title}</Typography>\n        <Typography variant=\"subtitle2\">{confirmDialog.subTitle}</Typography>\n      </DialogContent>\n      <DialogActions className={classes.dialogAction}>\n        <Button\n          variant=\"contained\"\n          color=\"primary\"\n          onClick={() => setConfirmDialog({ ...confirmDialog, isOpen: false })}\n        >\n          Cancel\n        </Button>\n        <Button\n          variant=\"contained\"\n          color=\"secondary\"\n          onClick={confirmDialog.onConfirm}\n        >\n          Delete\n        </Button>\n      </DialogActions>\n    </Dialog>\n  )\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Accordion from '@material-ui/core/Accordion'\nimport AccordionSummary from '@material-ui/core/AccordionSummary'\nimport AccordionDetails from '@material-ui/core/AccordionDetails'\nimport Typography from '@material-ui/core/Typography'\nimport ExpandMoreIcon from '@material-ui/icons/ExpandMore'\n\nimport Button from '@material-ui/core/Button'\nimport IconButton from '@material-ui/core/IconButton'\n\nimport Checkbox from '@material-ui/core/Checkbox'\nimport EditIcon from '@material-ui/icons/Edit'\nimport DeleteForeverIcon from '@material-ui/icons/DeleteForever'\n\n// import CheckCircleIcon from '@material-ui/icons/CheckCircle'\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\nimport ArchiveIcon from '@material-ui/icons/Archive'\nimport UnarchiveIcon from '@material-ui/icons/Unarchive'\n\nimport timeConverter from '../utils/timeConverter'\n\nimport axiosConnector from '../utils/axiosConnector'\n\nimport { Link } from 'react-router-dom'\n\nimport ConfirmDialog from './ConfirmDialog'\n\n// should really be in /utils/ but it's just one method so keeping it here for now\nfunction arraysEqual(a1, a2) {\n  /* WARNING: arrays must not contain {objects} or behavior may be undefined */\n  return JSON.stringify(a1) === JSON.stringify(a2)\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    width: '100%',\n  },\n  heading: {\n    fontSize: theme.typography.pxToRem(15),\n    fontWeight: theme.typography.fontWeightRegular,\n  },\n  checkbox: {\n    padding: '5px',\n  },\n  button: {\n    padding: '10px',\n  },\n\n  listItem: {\n    listStyle: 'none',\n  },\n}))\n\n/*\nImportant: The SimpleAccordion will be somewhat different based on if it's used in archived mode or normal mode\n*/\nexport default function SimpleAccordion({\n  taskObject,\n  handleFetchChange,\n  handleTaskChange,\n  archivedMode,\n}) {\n  const [task, setTask] = React.useState(taskObject)\n\n  const [subtasksCompleted, setSubtasksCompleted] = React.useState(() => {\n    let newArray = []\n    taskObject.subtasks.map((item, index) =>\n      newArray.push(Boolean(item.isCompleted))\n    )\n\n    return newArray\n  })\n\n  // i'm aware this is not good to repeat this but don't know how else to do it right now because\n  // normal variables can't be accessed before initialization of states and we need this originalState for\n  // conditional rendering\n  const [originalState, setOriginalState] = React.useState(() => {\n    let newArray = []\n    taskObject.subtasks.map((item, index) =>\n      newArray.push(Boolean(item.isCompleted))\n    )\n\n    return newArray\n  })\n\n  const [confirmDialog, setConfirmDialog] = React.useState({\n    isOpen: false,\n    title: '',\n    subTitle: '',\n  })\n\n  const handleChange = (index) => {\n    let newArray = [...subtasksCompleted]\n    newArray[index] = !newArray[index]\n\n    setSubtasksCompleted(newArray)\n  }\n\n  // This method will be used before sending subtask completion changes to database\n  // We'll update the task-state with subtasksCompleted (checkbox) values first\n  const updateStateObject = async () => {\n    let newObject = { ...task }\n\n    for (let i = 0; i < subtasksCompleted.length; i++) {\n      newObject.subtasks[i].isCompleted = subtasksCompleted[i]\n    }\n\n    setTask(newObject)\n  }\n\n  // This is for the use of SAVE-Button, when you click those checkboxes on subtask list\n  const sendChangesToBackend = async () => {\n    await updateStateObject()\n\n    try {\n      let response = await axiosConnector.postTaskForm('/modify', task)\n      // 200 means succesful post, so we know to give correct info to infoBox through app.js Snack-state, using handleFetchChange\n      if (response.status === 200) {\n        handleFetchChange(task, 'modify', true, '', true)\n      } else {\n        // otherwise we will show error message, and ok this code might not mean much to average user but it's still something\n        handleFetchChange(\n          task,\n          'modify',\n          false,\n          '' + response.status + ': ' + response.statusText,\n          true\n        )\n      }\n    } catch (err) {\n      // then there is probably the real error message that could happen more often\n      handleFetchChange(task, 'modify', false, '' + err.message, true)\n    }\n  }\n\n  // this is for the use of ARCHIVE and UNARCHIVE buttons, I know it's stupid to make many of these monsters but more info on README.MD i guess\n  const axiosArchiver = async (id, regex) => {\n    let actionToDo = regex === 'a+' ? 'archive' : 'unarchive'\n    try {\n      let response = await axiosConnector.archiveOrCompleteTask(id, regex)\n      if (response.status === 200) {\n        handleFetchChange(task, actionToDo, true, '', true)\n      } else {\n        // otherwise we will show error message, and ok this code might not mean much to average user but it's still something\n        handleFetchChange(\n          task,\n          actionToDo,\n          false,\n          '' + response.status + ': ' + response.statusText,\n          true\n        )\n      }\n    } catch (err) {\n      // then there is probably the real error message that could happen more often\n      handleFetchChange(task, actionToDo, false, '' + err.message, true)\n    }\n  }\n\n  // another monster with copy-pase, almost the same as previous ones but don't want to risk making bugs right now when it's one day to release day\n  const axiosDeleter = async (id) => {\n    try {\n      let response = await axiosConnector.deleteTask(id)\n      if (response.status === 204) {\n        handleFetchChange(task, 'delete', true, '', true)\n      } else {\n        // otherwise we will show error message, and ok this code might not mean much to average user but it's still something\n        handleFetchChange(\n          task,\n          'delete',\n          false,\n          '' + response.status + ': ' + response.statusText,\n          true\n        )\n      }\n    } catch (err) {\n      // then there is probably the real error message that could happen more often\n      handleFetchChange(task, 'delete', false, '' + err.message, true)\n    }\n  }\n\n  const classes = useStyles()\n\n  return (\n    <div className=\"accordion-testi\">\n      <Accordion>\n        <AccordionSummary\n          expandIcon={<ExpandMoreIcon />}\n          aria-controls=\"panel1a-content\"\n          id=\"panel1a-header\"\n        >\n          <Typography className=\"accordion-task-title\">{task.title}</Typography>\n        </AccordionSummary>\n        <AccordionDetails>\n          <Typography>\n            {/* In archived mode there will be different renderings because there will be less functionalities. Watch carefully for each\n            terminary operation if you want to follow the logic */}\n\n            {archivedMode === false ? (\n              <>\n                <span className=\"subtask-container\">\n                  {/* Finally came up with a solution to get rid of the uinque key warning: it uses either subtask_id or math_randomed one that\n                  is given by the name list_id in CreateNewSubtask() in TaskForm.js */}\n                  {task.subtasks.map((item, index) => (\n                    <li\n                      key={\n                        item.subtask_id !== undefined\n                          ? item.subtask_id\n                          : item.list_id\n                      }\n                      className={classes.listItem}\n                    >\n                      <span className=\"subtask-wrapper\">\n                        <Checkbox\n                          key={'checkbox' + item.id}\n                          style={{ color: 'purple' }}\n                          className={classes.checkbox}\n                          checked={subtasksCompleted[index]}\n                          onChange={() => handleChange(index)}\n                          size=\"small\"\n                          inputProps={{\n                            'aria-label': 'checkbox with small size',\n                          }}\n                        />\n\n                        <span onClick={() => handleChange(index)}>\n                          {item.title}\n                        </span>\n\n                        <span className=\"subtask-minutes\">\n                          {timeConverter.minutesToSubtask(item.minutes)}\n                        </span>\n                      </span>\n                    </li>\n                  ))}\n                </span>\n              </>\n            ) : (\n              <>\n                <span className=\"subtask-container\">\n                  {task.subtasks.map((item, index) => (\n                    <li\n                      key={\n                        item.subtask_id !== undefined\n                          ? item.subtask_id\n                          : item.list_id\n                      }\n                      className={classes.listItem}\n                    >\n                      <span className=\"subtask-wrapper\">\n                        <span>{item.title}</span>\n\n                        <span className=\"subtask-minutes\">\n                          {timeConverter.minutesToSubtask(item.minutes)}\n                        </span>\n                      </span>\n                    </li>\n                  ))}\n                </span>\n              </>\n            )}\n\n            <span className=\"button-group\">\n              <IconButton\n                onClick={() => {\n                  setConfirmDialog({\n                    isOpen: true,\n                    title: `Delete \"${task.title}\"?`,\n                    subTitle: \"You can't undo this operation\",\n                    onConfirm: async () => {\n                      axiosDeleter(task.id)\n                      // await axiosConnector.deleteTask(task.id)\n                      // handleFetchChange(task, 'delete', true, '', true)\n                    },\n                  })\n                }}\n                variant=\"contained\"\n                color=\"secondary\"\n                className={classes.button}\n                style={{\n                  border: 'none',\n                  margin: 5,\n                  backgroundColor: 'red',\n                  color: 'black',\n                }}\n                size=\"small\"\n              >\n                <DeleteForeverIcon />\n              </IconButton>\n\n              {archivedMode === false ? (\n                <>\n                  <Link\n                    to={{\n                      pathname: '/edit',\n                    }}\n                  >\n                    {/* // EDIT BUTTON */}\n                    <IconButton\n                      onClick={async () => {\n                        await handleTaskChange(task)\n                        // IIRC handleFetchChange is needed, so it will be guaranteed, that the info edited is up-to-date and\n                        // someone hasn't deleted the file in the meantime or something but I'm not sure what I was thinking\n                        // here.\n                        // handleFetchChange without attributes is wiping the infobox while fetching the data\n                        handleFetchChange()\n                      }}\n                      style={{\n                        backgroundColor: 'rgb(179, 217, 255)',\n                        border: 'none',\n                        margin: 5,\n                        color: 'black',\n                      }}\n                      variant=\"contained\"\n                      size=\"small\"\n                      className={classes.button}\n                    >\n                      <EditIcon />\n                    </IconButton>\n                  </Link>\n\n                  {/* // ARCHIVE BUTTON */}\n                  <IconButton\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{\n                      backgroundColor: 'rgb(255, 233, 120)',\n                      border: 'none',\n                      color: 'black',\n                      margin: 5,\n                    }}\n                    className={classes.button}\n                    size=\"small\"\n                    onClick={async () => {\n                      axiosArchiver(task.id, 'a+')\n                      //await axiosConnector.archiveOrCompleteTask(task.id, 'a+')\n                      //handleFetchChange(task, 'archive', true, '', true)\n                    }}\n                  >\n                    <ArchiveIcon />\n                  </IconButton>\n                </>\n              ) : (\n                <>\n                  {/* // UNARCHIVE BUTTON */}\n                  <IconButton\n                    variant=\"contained\"\n                    color=\"secondary\"\n                    style={{\n                      backgroundColor: 'violet',\n                      border: 'none',\n                      color: 'black',\n                      margin: 5,\n                    }}\n                    className={classes.button}\n                    size=\"small\"\n                    onClick={async () => {\n                      axiosArchiver(task.id, 'a-')\n                      //await axiosConnector.archiveOrCompleteTask(task.id, 'a-')\n                      // handleFetchChange(task, 'unarchive', true, '', true)\n                    }}\n                  >\n                    <UnarchiveIcon />\n                  </IconButton>\n                </>\n              )}\n            </span>\n\n            {!arraysEqual(originalState, subtasksCompleted) ? (\n              <span className=\"confirm-saves\">\n                <span className=\"confirm-saves-text\">UNSAVED CHANGES</span>\n                <Button\n                  style={{\n                    backgroundColor: '#ff8566',\n                    border: 'none',\n                    fontSize: '1.2em',\n                    padding: '2px 5px 2px 5px',\n                    textShadow: '1px 1px #f8f7ed',\n                  }}\n                  variant=\"contained\"\n                  size=\"small\"\n                  className={classes.button}\n                  onClick={() => sendChangesToBackend()}\n                  startIcon={<CheckCircleOutlineIcon />}\n                >\n                  SAVE\n                </Button>\n              </span>\n            ) : (\n              <></>\n            )}\n          </Typography>\n        </AccordionDetails>\n      </Accordion>\n\n      <ConfirmDialog\n        confirmDialog={confirmDialog}\n        setConfirmDialog={setConfirmDialog}\n      />\n    </div>\n  )\n}\n","import React from 'react'\nimport { makeStyles } from '@material-ui/core/styles'\nimport Card from '@material-ui/core/Card'\nimport CardActions from '@material-ui/core/CardActions'\nimport CardContent from '@material-ui/core/CardContent'\nimport Button from '@material-ui/core/Button'\nimport Typography from '@material-ui/core/Typography'\nimport { Link } from 'react-router-dom'\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n    backgroundColor: 'rgb(230, 230, 255)',\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n    color: 'black',\n  },\n  pos: {\n    marginBottom: 12,\n  },\n})\n\nexport default function SimpleCard({ message, icon }) {\n  const classes = useStyles()\n\n  return (\n    <Card className={classes.root}>\n      <CardContent>\n        <Typography className={classes.title} gutterBottom>\n          {icon}\n          {message}\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Link to=\"/\">\n          <Button color=\"primary\" size=\"small\">\n            BACK TO NORMAL MODE\n          </Button>\n        </Link>\n      </CardActions>\n    </Card>\n  )\n}\n","import React from 'react'\n\nimport Box from '@material-ui/core/Box'\n\nimport CheckCircleOutlineIcon from '@material-ui/icons/CheckCircleOutline'\nimport ErrorOutlineIcon from '@material-ui/icons/ErrorOutline'\n\n// important in case of someone wanting to update this: handleFetchChange() without arguments could update\n// this infobox to disappear while fetching new data, and handleCloseSnack would do the same without\n// fetching new data. both are initalized in App.js. ctrl+shift+search for those if it's important to change\n// the behaviour, I like it like this that they disappear in some cases but can still stay in others.\n\n// these are given from props 'snackinfo', which is the state 'snack' in app.js, this is not the optimal syntax I know\n//     taskObject,\n//     actionPerformed,\n//     isSuccesful,\n//     errorInfo\nexport default function Infobox({ snackinfo, handleCloseSnack }) {\n  // const [ShowThis, setShowThis] = React.useState(snackinfo[4])\n\n  // should have used json object instead of array come to think of it, or props the right way\n  let task = snackinfo[0]\n  let actionPerformed = snackinfo[1]\n  let isSuccesful = snackinfo[2]\n  let errorInfo = snackinfo[3]\n  let isVisible = snackinfo[4]\n\n  let actionInfo = ''\n\n  switch (actionPerformed) {\n    case 'delete':\n      actionInfo = 'DELETED'\n      break\n    case 'create':\n      actionInfo = 'CREATED'\n      break\n    case 'modify':\n      actionInfo = 'MODIFIED'\n      break\n    case 'archive':\n      actionInfo = 'ARCHIVED'\n      break\n    case 'unarchive':\n      actionInfo = 'UNARCHIVED'\n      break\n    case 'complete':\n      actionInfo = 'COMPLETED'\n      break\n    case 'fetch':\n      // not actually used in successful fetch\n      actionInfo = 'FETCH'\n      break\n\n    default:\n      actionInfo = 'UNKNOWN'\n  }\n\n  if (isVisible) {\n    return (\n      <>\n        <Box\n          /*\n          borderLeft={1}\n          borderRight={1} */\n          style={{\n            padding: '4px',\n            backgroundColor: isSuccesful ? 'lightGreen' : 'darkRed',\n            color: isSuccesful ? 'black' : 'white',\n          }}\n          className=\"infobox\"\n        >\n          {isSuccesful ? (\n            <CheckCircleOutlineIcon style={{ float: 'left' }} />\n          ) : (\n            <ErrorOutlineIcon style={{ float: 'left' }} />\n          )}\n          <span style={{}}>\n            {/* all written message inside this span */}\n            {isSuccesful ? (\n              <>\n                {' '}\n                {actionInfo} '{task.title}'{' '}\n              </>\n            ) : (\n              <>\n                {' '}\n                Error while trying to {actionPerformed}: {errorInfo}{' '}\n                {task.title}\n              </>\n            )}\n          </span>\n\n          {/*<Button onClick={() => setShowThis(false)}>X</Button>*/}\n          {/*<Button onClick={handleCloseSnack}>X</Button> */}\n        </Box>\n      </>\n    )\n  } else return <></>\n}\n","import React, { useState, useEffect } from 'react'\nimport MaterialTable from 'material-table'\nimport timeConverter from '../utils/timeConverter.js'\nimport AddTaskButton from './AddTaskButton'\nimport Accordion from './Accordion'\n\nimport SimpleCard from './SimpleCard'\nimport CircularProgress from '@material-ui/core/CircularProgress'\n\nimport Button from '@material-ui/core/Button'\nimport DoneIcon from '@material-ui/icons/Done'\nimport IconButton from '@material-ui/core/IconButton'\nimport ArchiveIcon from '@material-ui/icons/Archive'\n\nimport { Link } from 'react-router-dom'\n\nimport axiosConnector from '../utils/axiosConnector.js'\n\nimport Infobox from './Infobox'\n\n// uses this MaterialTable, very well suited component that gave us a lot of features we wanted with little effort... well sort\n// of, since it also caused dozens and dozens of hours work trying to fix some things that we wanted to\n// change or were probably bugged, at least in our use,\n// that it's not certain it was a wise decision to use it. Then again it taught us a lot, hopefully something\n// to take home when using other components since this is a whole new world to us, and in the next projects either\n// Material Table or some other components might be easier to implement\n\nexport default function TaskTable({\n  dataProps,\n  isLoading,\n  handleFetchChange,\n  handleTaskChange,\n  archivedMode,\n  snackinfo,\n  handleCloseSnack,\n}) {\n  const [tableData, setTableData] = useState([{ dataProps }])\n\n  useEffect(() => {\n    // console.log(tableData)\n  }, [tableData])\n\n  if (dataProps !== tableData) {\n    setTableData(dataProps)\n  }\n\n  // trying to solve the material-table-losing-the-forced-css-important-width-on-route-change-without-fetch fixed but can't do it right now\n  // this might work but who knows, also windows.reload maybe not good practice in react what i've read elsewhere\n  // https://www.reddit.com/r/reactjs/comments/eu8v15/how_to_force_refresh_on_a_route_change_in_react/\n  // const [, updateState] = React.useState()\n  // const forceUpdate = React.useCallback(() => updateState({}), [])\n\n  let data = tableData\n\n  const columns = [\n    /*\n    not actually needed since we sort this in the backend\n\n    {\n      field: 'modified',\n      type: 'date',\n      defaultSort: 'desc',\n      hidden: true,\n    },*/\n\n    {\n      title: 'DUE',\n      field: 'due',\n      type: 'date',\n      dateSetting: { locale: 'fi-FI' },\n      cellStyle: {\n        fontSize: '0.9em',\n        padding: 5,\n      },\n      headerStyle: {\n        backgroundColor: 'rgb(243, 243, 243)',\n        borderRadius: 0,\n      },\n    },\n\n    {\n      title: 'TASK',\n      field: 'title',\n      cellStyle: {\n        fontSize: '0.7em',\n        padding: 0,\n      },\n\n      render: (rowData) => (\n        <>\n          <span className=\"title-wrapper\">\n            <span className=\"title-row\">\n              <span className=\"title-row-container\">\n                <span className=\"title-row-textcontainer\">\n                  <span className=\"title-row-accordion\">\n                    <Accordion\n                      handleTaskChange={handleTaskChange}\n                      taskObject={rowData}\n                      handleFetchChange={handleFetchChange}\n                      archivedMode={archivedMode}\n                    />\n                  </span>\n\n                  {rowData.meta.percentage_done !== 100 ? (\n                    <span className=\"title-row-time-after-title\">\n                      {timeConverter.minutesToTitle(rowData.meta.minutes_left)}{' '}\n                      to do{' '}\n                    </span>\n                  ) : (\n                    <span className=\"title-row-time-after-title\">Done! </span>\n                  )}\n                </span>\n\n                {rowData.meta.percentage_done !== 100 ? (\n                  <span\n                    className=\"title-row-percents\"\n                    style={{\n                      width: rowData.meta.percentage_done + '%',\n                    }}\n                  ></span>\n                ) : (\n                  <span\n                    className=\"title-row-percents-done\"\n                    style={{\n                      width: rowData.meta.percentage_done + '%',\n                    }}\n                  ></span>\n                )}\n              </span>\n            </span>\n            {/* <div className=\"title-percentage-inside-wrapper\">\n              <span>{rowData.meta.percentage_done}%</span>\n            </div> */}\n          </span>\n        </>\n      ),\n    },\n    {\n      title: 'DONE',\n      field: 'meta.percentage_done',\n      dataType: 'numeric',\n      headerStyle: {\n        backgroundColor: 'rgb(247, 247, 247)',\n      },\n      cellStyle: {\n        padding: 5,\n        fontSize: '0.8em',\n        borderRadius: '0 0 0 7px',\n      },\n      render: (rowData) => (\n        <span>\n          <span\n            className=\"done-container\"\n            onClick={\n              rowData.meta.percentage_done !== 100 && !archivedMode\n                ? async () => {\n                    await axiosConnector.archiveOrCompleteTask(rowData.id, 'c+')\n                    handleFetchChange(rowData, 'complete', true, '', true)\n                  }\n                : () => console.log('already completed')\n            }\n            style={{\n              cursor:\n                rowData.meta.percentage_done !== 100 && !archivedMode\n                  ? 'pointer'\n                  : 'auto',\n              backgroundColor:\n                rowData.meta.percentage_done !== 100 && !archivedMode\n                  ? '#e6ffe6'\n                  : 'white',\n            }}\n          >\n            {rowData.meta.percentage_done === 100 ? (\n              <span className=\"checkmark\">✔️</span>\n            ) : (\n              <span className=\"percentage\">\n                {rowData.meta.percentage_done}%\n                {/* a bit complicetd to follow this, but another conditional rendering inside, bceause we\n                don't want to show this button in archived mode */}\n                {!archivedMode ? (\n                  <>\n                    <IconButton\n                      variant=\"contained\"\n                      style={{\n                        border: 'none',\n                        margin: 5,\n                        backgroundColor: 'violet',\n                        color: 'black',\n                      }}\n                      size=\"small\"\n                    >\n                      <DoneIcon></DoneIcon>\n                    </IconButton>\n                  </>\n                ) : (\n                  <> </>\n                )}\n              </span>\n            )}\n          </span>\n        </span>\n      ),\n    },\n  ]\n\n  if (!isLoading)\n    return (\n      <>\n        <div className={archivedMode ? 'archived-list' : 'todo-list'}>\n          <Infobox\n            snackinfo={snackinfo}\n            handleCloseSnack={handleCloseSnack}\n          ></Infobox>\n\n          {archivedMode === false ? (\n            <>\n              <div className=\"archive-button-container\">\n                <Link\n                  to=\"/archived\"\n                  onClick={handleCloseSnack}\n                  style={{ textDecoration: 'none' }}\n                >\n                  <Button\n                    style={{\n                      backgroundColor: 'rgb(255, 233, 120)',\n                    }}\n                    size=\"small\"\n                  >\n                    GO TO ARCHIVED MODE\n                  </Button>\n                </Link>\n              </div>\n            </>\n          ) : (\n            <>\n              <div className=\"archive-warning\">\n                <SimpleCard\n                  icon={\n                    <ArchiveIcon\n                      style={{\n                        backgroundColor: 'rgb(255, 233, 120)',\n                        float: 'left',\n                      }}\n                    />\n                  }\n                  message=\"You are watching tasks that have been archived. Most functionalities have\n              been disabled in this mode.\"\n                />\n              </div>\n            </>\n          )}\n\n          <MaterialTable\n            className={\n              archivedMode ? 'archived-material-table' : 'todo-material-table'\n            }\n            title={archivedMode ? 'ARCHIVED' : 'TO DO'}\n            data={data}\n            columns={columns}\n            options={{\n              headerStyle: { position: 'sticky', top: 0 },\n              maxBodyHeight: '100vh',\n              searchFieldStyle: {\n                width: 200,\n              },\n              thirdSortClick: true,\n              emptyRowsWhenPaging: false,\n              selection: false,\n              pageSize: 10,\n            }}\n          />\n        </div>\n\n        {archivedMode === false ? (\n          <div className=\"add-task-button-container\">\n            <Link to=\"/create\">\n              <AddTaskButton />\n            </Link>\n          </div>\n        ) : (\n          <></>\n        )}\n      </>\n    )\n  else {\n    return (\n      <>\n        {' '}\n        <CircularProgress />\n        <br /> Loading...{' '}\n      </>\n    )\n  }\n}\n","import React, { useState, useEffect } from 'react'\n\nimport './App.css'\n\nimport TaskForm from './components/TaskForm'\n\nimport { HashRouter, Route, Switch } from 'react-router-dom'\n\nimport TaskTable from './components/TaskTable.js'\n\nimport axiosConnector from './utils/axiosConnector.js'\n\nexport default function App() {\n  // normal data for material table use in exact route '/'\n  const [data, setData] = useState([])\n  // archivedData will be sent in the /archived route for the use of material table compoenent\n  const [archivedData, setArchivedData] = useState([])\n  // tells react that normal data can't be rendered, but some loading message instead\n  const [isLoading, setIsLoading] = useState(false)\n  // this is a workaround, useEffect has to wait some time because otherwise material table uses\n  // the data before the newest modifications are added. This workaround solution may seem stupid way but I tried many different ones that\n  // should have been more logical but I didn't get them to work because this Material Table works in mysterious ways.\n  // This is not foolproof, but works very well in development mode at least\n  const [needToFetch, setNeedToFetch] = useState(1)\n\n  // info to show based on latest action saving or trying to do modifications to database:\n  // taskObject, actionPerformed, isSuccesful, errorInfo, isVisible\n  //\n  // yea i realise now this should have been a json object ofc instead of array but too late to refactor right now, let's hope\n  // it gets finished anyway :)\n  const [snack, setSnack] = useState([\n    //taskObject\n    {\n      title: 'example',\n      minutes: '30',\n      due: null,\n      isCompleted: false,\n      subtasks: [],\n    },\n    // actionPerformed\n    'add',\n    // isSuccesful\n    true,\n    //errorInfo\n    '',\n    //isVisible\n    false,\n  ])\n\n  //the object inside might not be needed. trying to fix problems with typing /edit route directly without launchign / first with this\n  //but it doesn't work. This state appTask itself is needed though\n  const [appTask, setAppTask] = useState([\n    {\n      title: '',\n      minutes: '30',\n      due: null,\n      isCompleted: false,\n      subtasks: [],\n    },\n  ])\n\n  const handleCloseSnack = () => {\n    let temp = { ...snack }\n    temp[4] = false\n    setSnack(temp)\n  }\n\n  // handle that will be sent to other components in case of changes to datatable, allows table to be refreshed with a new data\n  // it would be great if this could be just given to custom axios component, and it would take care of this, instead of having this in a few\n  // different places. But there was problems trying to implement that kind of custom axios component. The axios is class instead of react\n  // component in the final release in /utils/axiosConnector.js\n  const handleFetchChange = (\n    taskObject,\n    actionPerformed,\n    isSuccesful,\n    errorInfo,\n    isVisible\n  ) => {\n    setNeedToFetch(needToFetch + 1)\n    setSnack([taskObject, actionPerformed, isSuccesful, errorInfo, isVisible])\n  }\n\n  const handleTaskChange = (task) => {\n    setAppTask(task)\n  }\n\n  // each time needToFetch state changes because of the handle, the app knows that new data should be fetched after a while, so everything will be up to date,\n  // but this might not be foolproof solution for all devices/connections using the app. Adding delay in setTimeOut would probably help but then there would be\n  // bigger loading time every time the new data is fetched, which is basically the same as every time some changes are made to the database with the current app client\n  useEffect(() => {\n    setTimeout(() => fetchArchivedData(), 705)\n    setTimeout(() => fetchData(), 700)\n  }, [needToFetch])\n\n  const fetchData = async () => {\n    setIsLoading(true)\n    try {\n      const fetched = await axiosConnector.fetchBasicData()\n\n      setData(fetched.data)\n    } catch (err) {\n      // setSnack([{}, 'fetch', false, '' + err.message, true])\n\n      // while alert might not be the best practice, it should be fine here, since this kind of database error will fail the whole app, and we\n      // can still see the other error that might have happened before this, for example \"Error while trying to create: and task name and other info\n      alert('Error trying to get data from database.')\n    }\n\n    setIsLoading(false)\n  }\n\n  const fetchArchivedData = async () => {\n    setIsLoading(true)\n    try {\n      const fetched = await axiosConnector.fetchArchivedData()\n\n      setArchivedData(fetched.data)\n    } catch (err) {\n      // this is a little quick fix, that might cause problems if there is something wrong with archived data fetch, but we will comment this out,\n      // since I want to set a little fix on the normal fetch, where this fetch problem will not replace a message about some other problem that\n      // was happening in addition to fetch problem\n      //\n      //  setSnack([{}, 'fetch', false, '' + err.message, true])\n      //}\n    }\n    setIsLoading(false)\n  }\n\n  return (\n    <div className=\"app\">\n      <>\n        {/* BrowserRouter instead of HashRouter worked perfectly on developement mode, but not in Heroku. This was a very fast fix. Main downside is\n        that It will make additional /#/ in our heroku route, so for example create page is https://tamk-4a00ez62-3001-group02.herokuapp.com/#/create\n      \n      Problem explained: https://stackoverflow.com/questions/27928372/react-router-urls-dont-work-when-refreshing-or-writing-manually/36623117#36623117 \n\n      Solutions that do not include /#/ are there but seemed like too much work, especially since we noticed this in 2021:\n      https://stackoverflow.com/questions/49240231/removing-from-hashrouter/49241468\n      https://dev.to/nburgess/creating-a-react-app-with-react-router-and-an-express-backend-33l3  \n       */}\n\n        <HashRouter>\n          <Switch>\n            <Route\n              exact\n              path=\"/\"\n              component={() => (\n                <TaskTable\n                  handleTaskChange={handleTaskChange}\n                  dataProps={data}\n                  isLoading={isLoading}\n                  needToFetch={needToFetch}\n                  handleFetchChange={handleFetchChange}\n                  archivedMode={false}\n                  snackinfo={snack}\n                  handleCloseSnack={handleCloseSnack}\n                />\n              )}\n            ></Route>\n\n            <Route\n              path=\"/archived\"\n              component={() => (\n                <TaskTable\n                  handleTaskChange={handleTaskChange}\n                  dataProps={archivedData}\n                  isLoading={isLoading}\n                  needToFetch={needToFetch}\n                  handleFetchChange={handleFetchChange}\n                  archivedMode={true}\n                  snackinfo={snack}\n                  handleCloseSnack={handleCloseSnack}\n                />\n              )}\n            ></Route>\n\n            <Route\n              path=\"/create\"\n              component={() => (\n                <TaskForm\n                  //appTask state version didn't work here for some reason so had to repeat this\n                  task={{\n                    title: '',\n                    minutes: '30',\n                    due: null,\n                    subtasks: [],\n                    isCompleted: false,\n                  }}\n                  handleFetchChange={handleFetchChange}\n                />\n              )}\n            ></Route>\n\n            <Route\n              path=\"/edit\"\n              component={() => (\n                <TaskForm\n                  task={appTask}\n                  handleFetchChange={handleFetchChange}\n                />\n              )}\n            ></Route>\n          </Switch>\n        </HashRouter>\n      </>\n    </div>\n  )\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport \"./App.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/css?family=Roboto:300,400,500,700&display=swap\"\n    />\n    <link\n      rel=\"stylesheet\"\n      href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n    />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","module.exports = {\n  // takes total_minutes as parameter and converts them to [h min] format, for example param 80\n  // will return string \"1h 20min\"\n  minutesToTitle: (total_minutes) => {\n    let string = \"\";\n    let hours = parseInt(total_minutes / 60);\n    let minutes = total_minutes % 60;\n    if (hours > 0) {\n      string += hours + \"h \";\n    }\n    if (minutes > 0) {\n      string += minutes + \"min\";\n    }\n\n    return string;\n  },\n  minutesToSlider: (total_minutes) => {\n    let string = \"\";\n    let hours = parseInt(total_minutes / 60);\n    let minutes = total_minutes % 60;\n    if (hours > 0) {\n      string += hours + \"h\";\n    }\n    if (minutes > 0) {\n      string += minutes + \"min\";\n    } else if (minutes === 0) {\n      string += \"00min\";\n    }\n    return string;\n  },\n  minutesToSubtask: (total_minutes) => {\n    let string = \"\";\n    let hours = parseInt(total_minutes / 60);\n    let minutes = total_minutes % 60;\n    if (hours > 0) {\n      string += hours + \"h \";\n    }\n    if (minutes > 0) {\n      string += minutes + \" min\";\n    }\n\n    return string;\n  },\n};\n"],"sourceRoot":""}